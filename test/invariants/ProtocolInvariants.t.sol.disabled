// SPDX-License-Identifier: MIT
pragma solidity ^0.8.28;

import "forge-std/Test.sol";
import "forge-std/StdInvariant.sol";
import "../../contracts/core/pREWAToken.sol";
import "../../contracts/core/TokenStaking.sol";
import "../../contracts/liquidity/LiquidityManager.sol";
import "../../contracts/controllers/EmergencyController.sol";
import "../../contracts/access/AccessControl.sol";
import "./Handler.sol";

contract ProtocolInvariantsTest is StdInvariant, Test {
    PREWAToken public token;
    TokenStaking public staking;
    LiquidityManager public liquidityManager;
    EmergencyController public emergencyController;
    AccessControl public ac;
    Handler public handler;
    
    address public admin;

    function setUp() public {
        admin = address(0x4001);
        
        vm.startPrank(admin);
        
        // Deploy AccessControl first
        ac = new AccessControl();
        ac.initialize(admin);
        
        // Deploy EmergencyController
        emergencyController = new EmergencyController();
        emergencyController.initialize(address(ac), address(0), 3, 1 days, admin);
        
        // Deploy token
        token = new PREWAToken();
        token.initialize("pREWA", "pREWA", 18, 1000000 ether, 0, address(ac), address(emergencyController), admin);
        
        // Deploy staking
        staking = new TokenStaking();
        staking.initialize(
            address(token),
            address(ac),
            address(emergencyController),
            address(0), // No oracle
            1000, // 10% APR
            7 days,
            admin,
            10 // Max positions per user
        );
        
        // Add a default tier so the handler can stake
        staking.addTier(7 days, 10000, 1000); // Tier 0
        
        // Grant the admin account minter role on the real token
        ac.grantRole(ac.MINTER_ROLE(), admin);
        token.addMinter(admin);

        // Fund the staking contract with rewards from the admin account
        token.mint(address(staking), 1_000_000_000e18);

        vm.stopPrank();
        
        handler = new Handler(staking);
        
        // Set handler as target for invariant testing
        targetContract(address(handler));
        
        // Define function selectors to test
        bytes4[] memory selectors = new bytes4[](3);
        selectors[0] = Handler.stake.selector;
        selectors[1] = Handler.unstake.selector;
        selectors[2] = Handler.warp.selector;
        
        targetSelector(FuzzSelector({
            addr: address(handler),
            selectors: selectors
        }));
    }
    
    // INVARIANT 1: Total supply should always equal sum of all balances
    function invariant_TotalSupplyConsistency() public {
        uint256 totalSupply = token.totalSupply();
        uint256 sumBalances = handler.sumOfBalances();
        // The staking contract also holds tokens (rewards), which need to be accounted for.
        sumBalances += token.balanceOf(address(staking));
        sumBalances += token.balanceOf(admin);
        assertEq(totalSupply, sumBalances, "Total supply != sum of balances");
    }
    
    // INVARIANT 2: Staked amount should never exceed total supply
    function invariant_StakingConsistency() public {
        uint256 totalStaked = staking.totalStaked();
        uint256 totalSupply = token.totalSupply();
        assertLe(totalStaked, totalSupply, "Staked amount exceeds total supply");
    }
    
    // INVARIANT 3: Emergency level should be valid
    function invariant_EmergencyLevelValid() public {
        uint8 level = emergencyController.getEmergencyLevel();
        assertLe(level, 3, "Emergency level exceeds maximum");
    }
    
    // INVARIANT 4: Contract balances should be consistent
    function invariant_ContractBalanceConsistency() public {
        uint256 stakingBalance = token.balanceOf(address(staking));
        uint256 totalStaked = staking.totalStaked();
        assertGe(stakingBalance, totalStaked, "Staking contract balance insufficient");
    }
    
    // INVARIANT 5: No user should have negative balance
    function invariant_NoNegativeBalances() public {
        address[] memory users = handler.getUsers();
        for (uint256 i = 0; i < users.length; i++) {
            uint256 balance = token.balanceOf(users[i]);
            assertTrue(balance >= 0, "User has negative balance");
        }
    }
    
    // INVARIANT 6: Emergency withdrawal should only be enabled during emergencies
    function invariant_EmergencyWithdrawalLogic() public {
        (bool enabled,) = emergencyController.getEmergencyWithdrawalSettings();
        uint8 level = emergencyController.getEmergencyLevel();
        
        if (enabled) {
            assertGe(level, 2, "Emergency withdrawal enabled without emergency");
        }
    }
    
    // INVARIANT 7: System pause should be consistent with emergency level
    function invariant_SystemPauseConsistency() public {
        bool paused = emergencyController.isSystemPaused();
        uint8 level = emergencyController.getEmergencyLevel();
        
        if (level >= 3) {
            assertTrue(paused, "System should be paused at level 3");
        }
    }
}